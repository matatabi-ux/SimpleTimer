<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ assembly name="$(ProjectDir)..\SimpleTimer.Shared\InfrastructureAssemblies\SimpleTimer.GenerateDefine.dll" #>
<#@ import namespace="SimpleTimer.GenerateDefine" #>
<#@ output extension=".generated.cs" #>
//<auto-generated>
#region License
//-----------------------------------------------------------------------
// <copyright>
//     Copyright matatabi-ux 2014.
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace SimpleTimer.Models
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Text;
    using System.Threading;
    using System.Threading.Tasks;
    using System.Xml;
    using System.Xml.Serialization;
	using Microsoft.Practices.Prism.Mvvm;
    using Windows.Storage;
<#
    foreach (var r in ModelDefinition.GetRepositoryDefinitions())
	{
#>

    /// <summary>
    /// <#= r.ModelDescription #> リポジトリのインタフェース
    /// </summary>
    public partial interface I<#= r.ModelName #>Repository
    {
        /// <summary>
        /// <#= r.ModelDescription #>
        /// </summary>
        <#= r.ModelName #> Data { get; }

        /// <summary>
        /// <#= r.ModelDescription #> を読み込む
        /// </summary>
        /// <returns>成功した場合は true, 失敗した場合は false</returns>
        Task<bool> LoadAsync();

        /// <summary>
        /// <#= r.ModelDescription #> を書き込む
        /// </summary>
        /// <returns>成功した場合は true, 失敗した場合は false</returns>
        Task<bool> SaveAsync();
   }

    /// <summary>
    /// <#= r.ModelDescription #> リポジトリ
    /// </summary>
    public partial class <#= r.ModelName #>Repository : I<#= r.ModelName #>Repository
    {
        #region Privates

<# if (r.IsRoming) { #>
        /// <summary>
        /// データの参照先フォルダ
        /// </summary>
        private static readonly IStorageFolder StoreFolder = ApplicationData.Current.RomingFolder;
<# } else { #>
        /// <summary>
        /// データの参照先フォルダ
        /// </summary>
        private static readonly IStorageFolder StoreFolder = ApplicationData.Current.LocalFolder;
<# } #>

        /// <summary>
        /// <#= r.ModelDescription #> のファイル名
        /// </summary>
        private static readonly string FileName = @"<#= r.FileName #>";

<# if (!string.IsNullOrEmpty(r.DefaultFileName)) { #>
        /// <summary>
        /// <#= r.ModelDescription #> のデフォルト設定ファイル名
        /// </summary>
        private static readonly string DefaultFilePath = @"<#= r.DefaultFileName #>";<# } #>

        #endregion //Privates

        /// <summary>
        /// コンストラクタ
        /// </summary>
        static <#= r.ModelName #>Repository()
        {
        }

        /// <summary>
        /// コンストラクタ
        /// </summary>
        public <#= r.ModelName #>Repository()
        {
        }

        /// <summary>
        /// <#= r.ModelDescription #>
        /// </summary>
        public <#= r.ModelName #> Data { get; private set; }

        /// <summary>
        /// <#= r.ModelDescription #> を読み込む
        /// </summary>
        /// <returns>成功した場合は true, 失敗した場合は false</returns>
        public async virtual Task<bool> LoadAsync()
        {
            try
            {
                var file = await StoreFolder.GetFileAsync(FileName);
                using (var stream = await file.OpenSequentialReadAsync())
                {
                    var serializer = new XmlSerializer(typeof(<#= r.ModelName #>));
                    this.Data = serializer.Deserialize(stream.AsStreamForRead()) as <#= r.ModelName #>;
                    ApplicationSettings.IsSynchronize = true;
                }

                return true;
            }
            catch (FileNotFoundException)
            {
<# if (!string.IsNullOrEmpty(r.DefaultFileName)) { #>
                Debug.WriteLine(string.Format("{0} がないのでデフォルトの設定情報を読み込みます。", FileName));
<# } else { #>
                Debug.WriteLine(string.Format("{0} がないのでデフォルトの設定情報を生成します。", FileName));
				this.Data = new <#= r.ModelName #>();<# } #>
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.ToString());
            }
			<# if (!string.IsNullOrEmpty(r.DefaultFileName)) { #>

            // 読み込みに失敗した場合はデフォルト値を読み込む
            try
            {
                var file = await StorageFile.GetFileFromApplicationUriAsync(new Uri(DefaultFilePath, UriKind.Absolute));
                using (var stream = await file.OpenSequentialReadAsync())
                {
                    var serializer = new XmlSerializer(typeof(<#= r.ModelName #>));
                    this.Data = serializer.Deserialize(stream.AsStreamForRead()) as <#= r.ModelName #>;
                    ApplicationSettings.IsSynchronize = true;
                }

                await this.SaveAsync();

                return true;
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.ToString());
            }<# } #>

            return false;
        }

        /// <summary>
        /// <#= r.ModelDescription #> を書き込む
        /// </summary>
        /// <returns>成功した場合は true, 失敗した場合は false</returns>
        public async virtual Task<bool> SaveAsync()
        {
            try
            {
                <#= r.ModelName #>.LockObject.WaitOne();

                var file = await StoreFolder.CreateFileAsync(FileName, CreationCollisionOption.ReplaceExisting);
                using (var stream = await file.OpenStreamForWriteAsync())
                {
                    var writer = XmlWriter.Create(
                         stream,
                         new XmlWriterSettings()
                         {
                             Encoding = Encoding.UTF8,
                             Indent = false,
                             NewLineChars = string.Empty,
                         });

                    var serializer = new XmlSerializer(typeof(<#= r.ModelName #>));
                    serializer.Serialize(writer, this.Data);
                }

                return true;
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.ToString());
            }
            finally
            {
                <#= r.ModelName #>.LockObject.ReleaseMutex();
            }

            return false;
        }
	}
<#
	}
#>
}
