<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ assembly name="$(ProjectDir)..\SimpleTimer.Shared\InfrastructureAssemblies\SimpleTimer.GenerateDefine.dll" #>
<#@ import namespace="SimpleTimer.GenerateDefine" #>
<#@ output extension=".generated.cs" #>
//<auto-generated>
#region License
//-----------------------------------------------------------------------
// <copyright>
//     Copyright matatabi-ux 2014.
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace SimpleTimer.Models
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;
	using System.Threading;
    using System.Threading.Tasks;
	using System.Xml.Serialization;
	using Microsoft.Practices.Prism.Mvvm;
<#
    foreach (var m in ModelDefinition.GetDefinitions())
	{
#>
<# if (!string.IsNullOrEmpty(m.Description)) { #>

    /// <summary>
    /// <#= m.Description #> のインタフェース
    /// </summary>
<# } #>
    public partial interface I<#= m.Name #>
    {<# if (m.PropertyAttributes != null) {
        foreach(var property in m.PropertyAttributes) { #>
<# if (!string.IsNullOrEmpty(property.DisplayName)) { #>

        /// <summary>
        /// <#= property.DisplayName #>
        /// </summary>
<# } #>
        <#= property.TypeName #> <#=property.Name #> { get; set; }
<#      }
    }
#>    }<# if (!string.IsNullOrEmpty(m.Description)) { #>


    /// <summary>
    /// <#= m.Description #>
    /// </summary>
<# } #>
<# if (m.Attributes != null) { foreach(var attribute in m.Attributes) {#>
    <#= attribute #>
<# } } #>
    public partial class <#= m.Name #> : I<#= m.Name #>
    {
        #region マルチスレッド排他制御用

        /// <summary>
        /// 排他制御フラグ
        /// </summary>
        private static bool isSynchronize = false;

        /// <summary>
        /// 排他制御フラグ
        /// </summary>
        [XmlIgnore]
        public static bool IsSynchronize
        {
            get { return isSynchronize; }
            set { isSynchronize = value; }
        }

        /// <summary>
        /// 排他制御オブジェクト
        /// </summary>
        public static readonly Mutex LockObject = new Mutex();

        #endregion //マルチスレッド排他制御用
	<# if (m.PropertyAttributes != null) {
        foreach(var property in m.PropertyAttributes) { #>

        #region <#= property.Name #>:<#= property.DisplayName #> プロパティ
<# if (!string.IsNullOrEmpty(property.DisplayName)) { #>
        /// <summary>
        /// <#= property.DisplayName #>
        /// </summary>
<# } #>
        private <#= property.TypeName #> <#= property.FieldName #><# if ( property.IsCollection ) { #> = new <#= property.TypeName #>()<# } #>; 

<# if (!string.IsNullOrEmpty(property.DisplayName)) { #>
        /// <summary>
        /// <#= property.DisplayName #> の取得および設定
        /// </summary>
<# } #>
<# if (property.Attributes != null) { foreach(var attribute in property.Attributes) {#>
        <#= attribute #>
<# } } #>
        public <#= property.TypeName #> <#=property.Name #>
        {
            get { return this.<#= property.FieldName #>; }
            set 
            {
                try
                {
                    if (isSynchronize)
                    {
                        LockObject.WaitOne();
                    }

                    this.<#= property.FieldName #> = value;
                }
                finally
                {
                    if (isSynchronize)
                    {
                        LockObject.ReleaseMutex();
                    }
                }
            }
        }
        #endregion //<#= property.Name #>:<#= property.DisplayName #> プロパティ
<#      }
    } #>
	}
<#
	}
#>
}
