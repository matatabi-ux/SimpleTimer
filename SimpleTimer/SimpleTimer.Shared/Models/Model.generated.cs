//<auto-generated>
#region License
//-----------------------------------------------------------------------
// <copyright>
//     Copyright matatabi-ux 2014.
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace SimpleTimer.Models
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;
	using System.Threading;
    using System.Threading.Tasks;
	using System.Xml.Serialization;
	using Microsoft.Practices.Prism.Mvvm;

    /// <summary>
    /// アプリケーション設定情報 のインタフェース
    /// </summary>
    public partial interface IApplicationSettings
    {
        /// <summary>
        /// タイマー残り秒数
        /// </summary>
        int TimerValue { get; set; }

        /// <summary>
        /// タイマー設定秒数
        /// </summary>
        int MaxSeconds { get; set; }
    }

    /// <summary>
    /// アプリケーション設定情報
    /// </summary>
    [XmlRoot("app-setting")]
    public partial class ApplicationSettings : IApplicationSettings
    {
        #region マルチスレッド排他制御用

        /// <summary>
        /// 排他制御フラグ
        /// </summary>
        private static bool isSynchronize = false;

        /// <summary>
        /// 排他制御フラグ
        /// </summary>
        [XmlIgnore]
        public static bool IsSynchronize
        {
            get { return isSynchronize; }
            set { isSynchronize = value; }
        }

        /// <summary>
        /// 排他制御オブジェクト
        /// </summary>
        public static readonly Mutex LockObject = new Mutex();

        #endregion //マルチスレッド排他制御用
	
        #region TimerValue:タイマー残り秒数 プロパティ
        /// <summary>
        /// タイマー残り秒数
        /// </summary>
        private int timerValue; 

        /// <summary>
        /// タイマー残り秒数 の取得および設定
        /// </summary>
        [XmlAttribute("value")]
        public int TimerValue
        {
            get { return this.timerValue; }
            set 
            {
                try
                {
                    if (isSynchronize)
                    {
                        LockObject.WaitOne();
                    }

                    this.timerValue = value;
                }
                finally
                {
                    if (isSynchronize)
                    {
                        LockObject.ReleaseMutex();
                    }
                }
            }
        }
        #endregion //TimerValue:タイマー残り秒数 プロパティ

        #region MaxSeconds:タイマー設定秒数 プロパティ
        /// <summary>
        /// タイマー設定秒数
        /// </summary>
        private int maxSeconds; 

        /// <summary>
        /// タイマー設定秒数 の取得および設定
        /// </summary>
        [XmlAttribute("max")]
        public int MaxSeconds
        {
            get { return this.maxSeconds; }
            set 
            {
                try
                {
                    if (isSynchronize)
                    {
                        LockObject.WaitOne();
                    }

                    this.maxSeconds = value;
                }
                finally
                {
                    if (isSynchronize)
                    {
                        LockObject.ReleaseMutex();
                    }
                }
            }
        }
        #endregion //MaxSeconds:タイマー設定秒数 プロパティ
	}
}
