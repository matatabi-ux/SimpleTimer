//<auto-generated>
#region License
//-----------------------------------------------------------------------
// <copyright>
//     Copyright matatabi-ux 2014.
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace SimpleTimer.GenerateDefine
{
    using System;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading.Tasks;

    /// <summary>
    /// プロパティ自動生成設定属性
    /// </summary>
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = true)]
    public class PropertyAttribute : Attribute
    {
        /// <summary>
        /// コンストラクタ
        /// </summary>
        /// <param name="name">プロパティ名称</param>
        /// <param name="type">プロパティの型</param>
        /// <param name="displayName">プロパティの説明</param>
        /// <param name="attributes">付帯属性</param>
        public PropertyAttribute(string name, Type type, string displayName, params string[] attributes)
        {
            var textInfo = System.Globalization.CultureInfo.CurrentCulture.TextInfo;

            this.Name = textInfo.ToUpper(name.ToCharArray().FirstOrDefault<char>()) + name.Substring(1);
            this.FieldName = textInfo.ToLower(name.ToCharArray().FirstOrDefault<char>()) + name.Substring(1);
            this.TypeName = GetTypeName(type);
            this.IsCollection = !type.IsArray && type.GetTypeInfo().ImplementedInterfaces.Contains(typeof(ICollection));
            this.DisplayName = displayName;
            this.Attributes = attributes;
        }

        /// <summary>
        /// プリミティブ型の表記置換表
        /// </summary>
        private static readonly Dictionary<string, string> Primitives = new Dictionary<string, string>()
        {
            {typeof(object).Name, "object"},
            {typeof(bool).Name, "bool"},
            {typeof(byte).Name, "byte"},
            {typeof(sbyte).Name, "sbyte"},
            {typeof(char).Name, "char"},
            {typeof(string).Name, "string"},
            {typeof(int).Name, "int"},
            {typeof(uint).Name, "uint"},
            {typeof(short).Name, "short"},
            {typeof(ushort).Name, "ushort"},
            {typeof(long).Name, "long"},
            {typeof(ulong).Name, "ulong"},
            {typeof(double).Name, "double"},
            {typeof(float).Name, "float"},
            {typeof(decimal).Name, "decimal"},
        };

        /// <summary>
        /// 型の名前を文字列化する
        /// </summary>
        /// <param name="type">変換対象の型</param>
        /// <returns>型の名前</returns>
        private static string GetTypeName(Type type)
        {
            var name = type.Name;
            var typeInfo = type.GetTypeInfo();
            if (type == typeof(string) || typeInfo.IsPrimitive)
            {
                return Primitives[name];
            }

            if (typeInfo.IsArray)
            {
                return string.Format("{0}{1}", GetTypeName(type.GetElementType()), string.Concat(Enumerable.Repeat("[]", type.GetArrayRank()).ToArray()));
            }

            if (!typeInfo.IsGenericType)
            {
                return name;
            }

            if (type.GetGenericTypeDefinition() == typeof(Nullable<>))
            {
                return string.Format("{0}?", type.GenericTypeArguments.Select(GetTypeName).FirstOrDefault());
            }
            return string.Format("{0}<{1}>", name.Substring(0, name.IndexOf('`')), string.Join(",", type.GenericTypeArguments.Select(GetTypeName)));
        }

        /// <summary>
        /// プロパティ名称
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// プロパティメンバ変数名称
        /// </summary>
        public string FieldName { get; set; }

        /// <summary>
        /// プロパティの型
        /// </summary>
        public string TypeName { get; set; }

        /// <summary>
        /// コレクション型フラグ
        /// </summary>
        public bool IsCollection { get; set; }

        /// <summary>
        /// プロパティの日本語名
        /// </summary>
        public string DisplayName { get; set; }

        /// <summary>
        /// 付帯属性
        /// </summary>
        public string[] Attributes { get; set; }
    }
}
